name: Serverless Connect Test2

on:
  schedule:
    - cron: "0/30 * * * *"  # every 30 minutes
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up ticloud
        uses: tidbcloud/setup-tidbcloud-cli@v0
        with:
          api_public_key: ${{ secrets.CONNECT_PUBLIC_KEY }}
          api_private_key: ${{ secrets.CONNECT_PRIVATE_KEY }}

      - name: Delete all serverless
        run: |
          # delete all serverless
          ticloud cluster list 1372813089447741295 -o json > cluster
          total=$(jq '.total' cluster);
          for i in {1..$total}  
          do
          id=`echo $(jq '.items[$i-1].id' cluster) | sed 's/"//g'`
          ticloud cluster delete -p 1372813089447741295 -c $id --force;
          done

  connect-test:
    needs: setup
    strategy:
      matrix:
        region: [ us-east-1, us-west-2, ap-northeast-1, ap-southeast-1, eu-central-1 ]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up ticloud
        uses: tidbcloud/setup-tidbcloud-cli@v0
        with:
          api_public_key: ${{ secrets.CONNECT_PUBLIC_KEY }}
          api_private_key: ${{ secrets.CONNECT_PRIVATE_KEY }}

      - name: Set projectID
        run:  echo "::set-env name=PROJECT_ID::1372813089447741295"

      - name: Create cluster
        run: |
          ticloud cluster create -p $PROJECT_ID --cluster-name ${{ matrix.region }} --cloud-provider AWS -r ${{ matrix.region }} --root-password ${{ secrets.TIDB_CLOUD_PASSWORD }} --cluster-type SERVERLESS > ${{ matrix.region }}
          echo "::set-env name=CLUSTER_ID::`cat ${{ matrix.region }} | sed 's/[^0-9]//g'`"
          ticloud cluster get -p $PROJECT_ID -c $CLUSTER_ID > ${{ matrix.region }}
          cat ${{ matrix.region }}
          echo "::set-env name=CLUSTER_USER::(jq '.status.connection_strings.default_user' ${{ matrix.region }})"
          echo "::set-env name=CLUSTER_HOST::(jq '.status.connection_strings.standard.host' ${{ matrix.region }})"

      - name: Get mysql
        uses: shogo82148/actions-setup-mysql@v1

      - name: Run test
        run: mysql -u $CLUSTER_USER -h $CLUSTER_HOST -P 4000 -D test --ssl-mode=VERIFY_IDENTITY --ssl-ca=/etc/ssl/certs/ca-certificates.crt -p${{ secrets.TIDB_CLOUD_PASSWORD }}

      - name: Delete cluster
        run: |
          ticloud cluster delete -p $PROJECT_ID -c $CLUSTER_ID --force  
